
// user
#include "main.h"

// cstd
#include <stdbool.h>
#include <stdint.h>


#pragma once


// Разрабатываем некий класс
// Для датчика HX711
// Поэтому все методы этого класса называются с префиксом HX711

// Вспомогательный тип - возможные значения усиления
typedef enum
{
   GAIN_128 = 1,
   GAIN_64 = 3,
   GAIN_32 = 2
} gain_factor_t;

// Поля класса. Их не должен трогать никто, кроме методов класса
// Так гласит принцип инкапсуляции!
typedef struct
{
   GPIO_TypeDef*  m_port;           // Порт, куда подключён датчик
   uint16_t       m_clk_pin;        // Пин линии тактирования
   uint16_t       m_dt_pin;         // Пин линии данных
   gain_factor_t  m_gain;           // Значение коэффициента усиления
   int32_t        m_calibration;    // Калибровочное значение
   int16_t        m_value;          // Значение, считанное с датчика
   bool           m_available;      // Доступен ли датчик
   int            m_na_cnt;         // Счётчик последовательных нулей
}
hx711_t;


// Методы класса:
// Только публичные - те, которые вызывает пользователь класса
// Про остальные ему знать не следует
// Так гласит принцип инкапсуляции!

// Конструктор (вызывается в самом начале для инициализации значений полей класса)
void HX711_Constructor(hx711_t*        object,  // Ссылка на объект класса Sensor
                        GPIO_TypeDef*  port,    // Порт, куда подключён датчик
                        uint16_t       clk_pin, // Пин линии тактирования
                        uint16_t       dt_pin,  // Пин линии данных
                        gain_factor_t  gain);   // Значение коэффициента усиления
// Сканировать датчики
void HX711_Scan(hx711_t* object);
// Получить показания датчика
int16_t HX711_GetValue(hx711_t* object);
// Доступен ли датчик
bool HX711_IsAvailable(hx711_t* object);
